package require tcltest

source $::env(TRAILS_HOME)/configs/configs.tcl
source $::env(TRAILS_HOME)/http/router.tcl
source $::env(TRAILS_HOME)/http/request.tcl
source $::env(TRAILS_HOME)/http/response.tcl
source $::env(TRAILS_HOME)/http/http_server.tcl
source $::env(TRAILS_HOME)/tests/extra/dummy_controller.tcl

namespace import ::tcltest::*
namespace import ::controllers::DummyController
namespace import ::controllers::IndexController
namespace import ::trails::http::Request
namespace import ::trails::http::router::Route


set ::env(ENV) test
::trails::configs::init_with_file $::env(TRAILS_HOME)/tests/extra/application.yaml

proc setup {} {
}

proc cleanup {} {
}


test dummy_controller_index_override_test {} -body { 
	set dummy [DummyController new]
	set request [Request new]	
	set response [$dummy dispatch_action index $request]
	$response prop body 
} -result {index override}

test dummy_controller_save_test {} -body { 
	set dummy [DummyController new]
	set request [Request new]	
	set response [$dummy dispatch_action save $request]
	$response prop body
} -result {save}

test dummy_controller_edit_test {} -body { 
	set dummy [DummyController new]
	set request [Request new]	
	set response [$dummy dispatch_action edit $request]
	$response prop body 
} -result {edit}

test dummy_controller_show_test {} -body { 
	set dummy [DummyController new]
	set request [Request new]	
	set response [$dummy dispatch_action show $request]
	$response prop body 
} -result {show}

test dummy_controller_update_test {} -body { 
	set dummy [DummyController new]
	set request [Request new]	
	set response [$dummy dispatch_action update $request]
	$response prop body 
} -result {update}

test dummy_controller_delete_test {} -body { 
	set dummy [DummyController new]
	set request [Request new]	
	set response [$dummy dispatch_action delete $request]
	$response prop body 
} -result {delete}

test dummy_controller_custom_test {} -body { 
	set dummy [DummyController new]
	set request [Request new]	
	set response [$dummy dispatch_action custom $request]
	$response prop status 
} -result {200}

test dummy_controller_not_found_test {} -body { 
	set dummy [DummyController new -scaffold false]
	set request [Request new]	
	set response [$dummy dispatch_action delete $request]	
	$response prop status
} -result {404}

test dummy_controller_not_allowed_method {} -body { 
	set dummy [DummyController new -scaffold false --allowed_methods {delete delete}]
	set request [Request new -method get]	
	set response [$dummy dispatch_action delete $request]	
	$response prop status
} -result {405}

test dummy_controller_allowed_method {} -body { 
	set dummy [DummyController new -scaffold true --allowed_methods {delete delete,get}]
	set request [Request new -method get]	
	set response [$dummy dispatch_action delete $request]	
	$response prop status
} -result {200}

test dummy_controller_routes {} -body { 
	set dummy [DummyController new -scaffold true --allowed_methods {delete delete,get}]
	set routes [$dummy get_routes]
	llength $routes
} -result {24}

test dummy_controller_build_routes {} -body { 
	set dummy [DummyController new -scaffold true --route_prefix {}]
	set routes [$dummy get_routes]
	::trails::http::router::build_scaffold_routes $routes
	#::trails::http::router::print
	set route [::trails::http::router::match /dummy get]
	expr {$route != ""}
} -result {1}

test dummy_controller_with_render {} -body { 
	::trails::http::router::build_scaffold_routes [[DummyController new] get_routes]	
	::trails::http::router::print
	set response [::trails::http::dispatch [Request new -path /dummy/withrender]]
	list [$response prop status] [$response prop body] [$response prop content-type]
} -result {200 withrender text/plain}

test dummy_controller_with_list1 {} -body { 
	::trails::http::router::build_scaffold_routes [[DummyController new] get_routes]	
	set response [::trails::http::dispatch [Request new -path /dummy/list1]]
	list [$response prop status] [$response prop body] [$response prop content-type]
} -result {200 list1 text/plain}

test dummy_controller_with_list2 {} -body { 
	::trails::http::router::build_scaffold_routes [[DummyController new] get_routes]	
	set response [::trails::http::dispatch [Request new -path /dummy/list2]]
	list [$response prop status] [$response prop body] [$response prop content-type]
} -result {200 list2 text/plain}

test dummy_controller_with_json {} -body { 
	::trails::http::router::build_scaffold_routes [[DummyController new] get_routes]	
	set response [::trails::http::dispatch [Request new -path /dummy/withjson]]
	list [$response prop status] [$response prop body] [$response prop content-type]
} -result {200 {[{"x": 3}]} application/json}

test dummy_controller_with_html {} -body { 
	::trails::http::router::build_scaffold_routes [[DummyController new] get_routes]	
	set response [::trails::http::dispatch [Request new -path /dummy/withhtml]]
	list [$response prop status] [$response prop body] [$response prop content-type]
} -result {200 {<html><body><h1>hello, trails!</h1></body></html>} text/html}

test dummy_controller_with_html {} -body { 
	::trails::http::router::build_scaffold_routes [[DummyController new] get_routes]	
	set response [::trails::http::dispatch [Request new -path /dummy/withhtml]]
	list [$response prop status] [$response prop body] [$response prop content-type]
} -result {200 {<html><body><h1>hello, trails!</h1></body></html>} text/html}

test dummy_controller_filter_before {} -body { 
	set dummy [DummyController new -filters {index {MyFilterLeave leave *}}]
	::trails::http::add_controller $dummy
	::trails::http::router::build_scaffold_routes [$dummy get_routes]
	set response [::trails::http::dispatch [Request new -path /dummy]]
	$response prop body
} -result {filter}

test index_controller {} -body { 
	set index [IndexController new]
	::trails::http::router::build_scaffold_routes [$index get_routes]
	::trails::http::router::print
	set response [::trails::http::dispatch [Request new -path /]]
	$response prop body
} -result {default index}


cleanupTests
